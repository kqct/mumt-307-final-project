% blit gets the next tick of a Hammerich-based BLIT.
% x is the sample number
% sampleRate is self explanatory
% so is frequency
% filterSlope controls how fast the filter falls off, larger values falling
% slower (0.05 is fast, 1.0 is slow)
% harmonicsCount defines the cutoff frequency â€“ it's the number of
% harmonics we want to allow in the final signal
% overlapCount is a measure of resolution, of sorts - how many pulse
% functions do we wantto calculate at once? a higher number gives greater
% accuracy at the expense of computational power
% windowType defines the window type of each individual pulse. currently
% locked to Hamming
function y = blit(x, sampleRate, frequency, filterSlope, harmonicsCount, overlapCount) % windowType
    s = sampleRate / frequency;
    samplePointers = zeros(overlapCount, 1);
    for i = 1:overla

    y = hammerichPulse(n, harmonicsCount, filterSlope, frequency, sampleRate);
end

% hammerichPulse gets a Hammerich pulse value at a point.
% n is the input time
% harmonicsCount is the number of harmonics before the filter starts
% rolling off
% filterSlope controls how fast the filter falls off, larger values falling
% slower (0.05 is fast, 1.0 is slow)
% frequency is the fundamental frequency of the produced wave
% sampleRate is self-explanatory, in Hz
function h_H = hammerichPulse(n, harmonicsCount, filterSlope, frequency, sampleRate)
    omegaN = 2 * pi * (frequency / sampleRate) * n;
    h_H = (filterSlope * sin(harmonicsCount * omegaN)) / sinh(filterSlope * harmonicsCount * omegaN);
end